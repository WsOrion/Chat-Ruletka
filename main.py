import telebot
from telebot import types
import os
import json
import random
import threading
import time
from telebot.types import ReplyKeyboardRemove

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    with open("token.txt", "r") as file:
        API_TOKEN = file.read().strip()
except FileNotFoundError:
    print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª token.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    exit()

bot = telebot.TeleBot(API_TOKEN)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
ADMIN_ID = 11111111 #–∏–¥ –≤–ª–∞–¥–µ–ª—å—Ü–∞
DIONCHIK_ID = 11111111   #–∏–¥ –¥—Ä—É–≥–∞
TESTER_IDS = {123456789, 987654321}  #–∏–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤—á–∏–∫–æ–≤
ADMINS_FILE = "admins.json"
PROMO_FILE = "promocodes.txt"
USERS_FILE = "users.txt"
ADMIN_PROMO = "CLIFFORD"  # —ç—Ç–æ –ø—Ä–æ–º–æ –¥–ª—è –∞–¥–º–∏–∫–∏ –µ—Å–ª–∏ —á–µ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
if os.path.exists(ADMINS_FILE):
    with open(ADMINS_FILE, "r") as f:
        admins_data = json.load(f)
        SUB_ADMINS = set(admins_data.get("sub_admins", []))
else:
    SUB_ADMINS = set()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if not os.path.exists(USERS_FILE):
        return {}
    users = {}
    with open(USERS_FILE, "r") as file:
        for line in file:
            parts = line.strip().split(" | ")
            if len(parts) >= 4:
                user_id = int(parts[0])
                users[user_id] = {
                    "age": int(parts[1]),
                    "phone": parts[2],
                    "language": parts[3],
                    "balance": int(parts[4]) if len(parts) > 4 else 0,
                    "active": True
                }
    return users

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_all_users():
    with open(USERS_FILE, "w") as file:
        for user_id, data in user_data.items():
            file.write(f"{user_id} | {data['age']} | {data['phone']} | {data['language']} | {data.get('balance', 0)}\n")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
def load_promocodes():
    if not os.path.exists(PROMO_FILE):
        return {}
    promos = {}
    with open(PROMO_FILE, "r") as f:
        for line in f:
            line = line.strip()
            if line and "|" in line:
                code, reward = line.split("|", 1)
                promos[code.strip()] = reward.strip()
    return promos

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
def save_promocodes(promos):
    with open(PROMO_FILE, "w") as f:
        for code, reward in promos.items():
            f.write(f"{code}|{reward}\n")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
def save_admins():
    with open(ADMINS_FILE, 'w') as f:
        json.dump({
            "admin": ADMIN_ID,
            "sub_admins": list(SUB_ADMINS)
        }, f)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_status(user_id):
    if user_id == ADMIN_ID:
        return "üëë –í–ª–∞–¥–µ–ª–µ—Ü"
    elif user_id in SUB_ADMINS:
        return "üõ° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    elif user_id in TESTER_IDS:
        return "üîß –¢–µ—Å—Ç–µ—Ä"
    elif user_id == DIONCHIK_ID:
        return "OPIUM‚õß"
    else:
        return "üë§ –û–±—ã—á–Ω—ã–π"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞
def is_admin(user_id):
    return user_id == ADMIN_ID or user_id in SUB_ADMINS

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
user_data = load_users()
pending_data = {}
waiting_users = {}
chat_pairs = {}
user_refs = {}
active_promos = {}

# –ú–µ–Ω—é –±–æ—Ç–∞
def show_menu(chat_id):
    bot_description = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-—Ä—É–ª–µ—Ç–∫—É!\n\nüìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    markup.add(types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search"))
    markup.row(
        types.InlineKeyboardButton("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
        types.InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    )
    markup.row(
        types.InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", url="https://t.me/wsorion"),
        types.InlineKeyboardButton("ü§ñ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞", callback_data="create_bot")
    )
    markup.add(types.InlineKeyboardButton("üíé –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url="http://t.me/send?start=IVyflPZeWlJi"))
    markup.add(types.InlineKeyboardButton("ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data="invite"))
    markup.add(types.InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo_code"))
    
    bot.send_message(chat_id, bot_description, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    if len(message.text.split()) > 1:
        ref_code = message.text.split()[1]
        if ref_code.startswith('ref'):
            referrer_id = int(ref_code[3:])
            if referrer_id in user_data and referrer_id != user_id:
                if user_id not in user_refs.get(referrer_id, []):
                    user_refs.setdefault(referrer_id, []).append(user_id)
                    user_data[referrer_id]['balance'] = user_data[referrer_id].get('balance', 0) + 20
                    save_all_users()
                    bot.send_message(referrer_id, f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data[referrer_id]['balance']} —Ä—É–±")
    
    if user_id not in user_data:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
        pending_data[user_id] = {"state": "waiting_age"}
    else:
        show_menu(message.chat.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@bot.message_handler(func=lambda message: message.from_user.id in pending_data and pending_data[message.from_user.id].get("state") == "waiting_age")
def ask_age(message):
    age = message.text.strip()
    if not age.isdigit() or int(age) < 10 or int(age) > 100:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-100).")
        return

    user_id = message.from_user.id
    pending_data[user_id] = {"state": "waiting_phone", "age": int(age)}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", request_contact=True))
    bot.send_message(message.chat.id, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@bot.message_handler(content_types=['contact'])
def confirm_phone(message):
    if message.contact is not None:
        user_id = message.from_user.id
        if user_id in pending_data and pending_data[user_id].get("state") == "waiting_phone":
            phone = message.contact.phone_number
            age = pending_data[user_id]["age"]
            
            user_data[user_id] = {
                "age": age,
                "phone": phone,
                "language": "ru",
                "balance": 0,
                "active": True
            }
            save_all_users()
            del pending_data[user_id]
            
            bot.send_message(message.chat.id, "–ê–∫–∫–∞—É–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!", reply_markup=ReplyKeyboardRemove())
            show_menu(message.chat.id)

# –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
@bot.callback_query_handler(func=lambda call: call.data == "search")
def search_handler(call):
    user_id = call.from_user.id
    
    if user_id in chat_pairs:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤ —á–∞—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop —á—Ç–æ–±—ã –≤—ã–π—Ç–∏", show_alert=True)
        return
    
    if user_id in waiting_users:
        bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ! –û–∂–∏–¥–∞–π—Ç–µ...", show_alert=True)
        return
    
    waiting_users[user_id] = True
    bot.edit_message_text("üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", call.message.chat.id, call.message.message_id)
    
    # –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=find_companion, args=(user_id, call.message.chat.id, call.message.message_id)).start()

def find_companion(user_id, chat_id, message_id):
    time.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    
    # –ò—â–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥–∏
    for other_user in list(waiting_users.keys()):
        if other_user != user_id and other_user in user_data and user_data[other_user].get('active', True):
            # –ù–∞—à–ª–∏ –ø–∞—Ä—É
            del waiting_users[user_id]
            del waiting_users[other_user]
            
            chat_pairs[user_id] = other_user
            chat_pairs[other_user] = user_id
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            bot.edit_message_text("‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", 
                                chat_id, message_id)
            
            bot.send_message(other_user, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
            return
    
    # –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
    if user_id in waiting_users:
        bot.edit_message_text("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ, –∏—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", chat_id, message_id)
        time.sleep(10)
        if user_id in waiting_users:
            del waiting_users[user_id]
            bot.edit_message_text("üòï –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", chat_id, message_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
@bot.message_handler(func=lambda message: message.from_user.id in chat_pairs and message.text != '/stop')
def chat_message(message):
    user_id = message.from_user.id
    companion_id = chat_pairs[user_id]
    


    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    try:
        bot.send_message(companion_id, f"üë§ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫: {message.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        bot.send_message(user_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")
        if user_id in chat_pairs:
            del chat_pairs[user_id]
        if companion_id in chat_pairs:
            del chat_pairs[companion_id]

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–∞
@bot.message_handler(commands=['stop'])
def stop_chat(message):
    user_id = message.from_user.id
    
    if user_id in chat_pairs:
        companion_id = chat_pairs[user_id]
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        bot.send_message(user_id, "‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞", reply_markup=ReplyKeyboardRemove())
        bot.send_message(companion_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç", reply_markup=ReplyKeyboardRemove())
        
        # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É
        del chat_pairs[user_id]
        del chat_pairs[companion_id]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        show_menu(user_id)
        show_menu(companion_id)
    elif user_id in waiting_users:
        del waiting_users[user_id]
        bot.send_message(user_id, "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω", reply_markup=ReplyKeyboardRemove())
        show_menu(user_id)
    else:
        bot.send_message(user_id, "–í—ã –Ω–µ –≤ —á–∞—Ç–µ –∏ –Ω–µ –≤ –ø–æ–∏—Å–∫–µ")

# –î–æ–±–∞–≤–∏–º —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —Å –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥

# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª —Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥ (–æ–±—ã—á–Ω–æ –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞, –Ω–æ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞)

@bot.message_handler(commands=['publ'])
def handle_publish(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    status = get_user_status(user_id)
    if status not in ["üëë –í–ª–∞–¥–µ–ª–µ—Ü", "üõ° –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"]:
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    msg = bot.reply_to(message, "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    bot.register_next_step_handler(msg, process_publish_text)

def process_publish_text(message):
    user_id = message.from_user.id
    text_to_publish = message.text
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="publish_yes"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="publish_no")
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    pending_data[user_id] = {
        "action": "confirm_publish",
        "publish_text": text_to_publish
    }
    
    bot.send_message(
        user_id,
        f"üì¢ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?\n\n{text_to_publish}",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('publish_'))
def handle_publish_decision(call):
    user_id = call.from_user.id
    action = call.data.split('_')[1]
    
    if action == "yes" and user_id in pending_data and "publish_text" in pending_data[user_id]:
        text_to_publish = pending_data[user_id]["publish_text"]
        del pending_data[user_id]
        
        bot.edit_message_text("‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...", call.message.chat.id, call.message.message_id)
        
        success = 0
        failed = 0
        total_users = len(user_data)
        
        for uid in user_data:
            try:
                if uid != user_id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ–±–µ
                    bot.send_message(uid, f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{text_to_publish}")
                    success += 1
            except:
                failed += 1
        
        bot.edit_message_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–£—Å–ø–µ—à–Ω–æ: {success}\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å: {failed}",
            call.message.chat.id,
            call.message.message_id
        )
    else:
        if user_id in pending_data:
            del pending_data[user_id]
        bot.edit_message_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", call.message.chat.id, call.message.message_id)





#üü•–º–µ–º–±–µ—Ä
@bot.message_handler(commands=['member'])
def handle_member_command(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏ Dimonchik)
    if user_id not in {ADMIN_ID, DIONCHIK_ID}:
        bot.reply_to(message, "üö´ –ö–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∏ Dimonchik!")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = load_users()
    
    if not users:
        bot.reply_to(message, "üì≠ –í –±–æ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    result = "üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for uid, user_data in users.items():
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            chat = bot.get_chat(uid)
            username = f"@{chat.username}" if chat.username else "‚Äî"
            phone = user_data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É (–ø—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç)
            result += f"üë§ <b>–Æ–∑–µ—Ä:</b> {username}\n"
            result += f"üÜî <b>ID:</b> <code>{uid}</code>\n"
            result += f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phone}</code>\n"
            result += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
            
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            result += f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}\n"
            result += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥
    result += f"\nüë• <b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {len(users)}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏ (–µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    for i in range(0, len(result), 4000):
        bot.send_message(message.chat.id, result[i:i+4000], parse_mode='HTML')















#–ü–ò–°–ê–¢–¨ –õ–ò–ß–ù–û
@bot.message_handler(commands=['send'])
def handle_send_command(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not (user_id == ADMIN_ID or  # –í–ª–∞–¥–µ–ª–µ—Ü
            user_id == DIONCHIK_ID): 
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = bot.reply_to(message, 
                      "‚úâÔ∏è <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n"
                      "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                      "<code>ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>\n\n"
                      "–ü—Ä–∏–º–µ—Ä:\n"
                      "<code>8133981519 –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</code>",
                      parse_mode="HTML")
    bot.register_next_step_handler(msg, process_send_command)

def process_send_command(message):
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ ID –∏ —Ç–µ–∫—Å—Ç
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        target_id = int(parts[0])
        text = parts[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞—é—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ
        if message.from_user.id == target_id:
            bot.reply_to(message, "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_message(target_id, f"üì® <b>–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</b>\n\n{text}", parse_mode="HTML")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
            bot.reply_to(message, 
                        f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}\n"
                        f"‚îî –¢–µ–∫—Å—Ç: {text}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            sender_status = get_user_status(message.from_user.id)
            print(f"[SEND] {sender_status} {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
            
        except Exception as e:
            bot.reply_to(message, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}\n–û—à–∏–±–∫–∞: {str(e)}")
            
    except ValueError:
        bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ ID (—á–∏—Å–ª–æ) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")








# –ü—Ä–æ–º–æ–∫–æ–¥—ã
@bot.callback_query_handler(func=lambda call: call.data == "promo_code")
def promo_code_menu(call):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton("üé´ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo"),
        types.InlineKeyboardButton("‚ùå –ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞", callback_data="no_promo")
    )
    
    if is_admin(call.from_user.id):
        markup.add(types.InlineKeyboardButton("üõ† –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promo"))
    
    bot.edit_message_text(
        "üîπ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º:",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@bot.callback_query_handler(func=lambda call: call.data == "create_promo")
def create_promo_handler(call):
    if not is_admin(call.from_user.id):
        bot.answer_callback_query(call.id, "‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!", show_alert=True)
        return
    
    instructions = (
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/newpromo –ö–û–î|–ù–ê–ì–†–ê–î–ê</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ <code>/newpromo BONUS100|100 —Ä—É–±–ª–µ–π</code>\n"
        "‚Ä¢ <code>/newpromo VIP|–ü—Ä–µ–º–∏—É–º –Ω–∞ 1 –¥–µ–Ω—å</code>"
    )
    
    bot.edit_message_text(
        instructions,
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML"
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
@bot.message_handler(commands=['newpromo'])
def handle_new_promo(message):
    if not is_admin(message.from_user.id):
        return
    
    try:
        _, promo_data = message.text.split(maxsplit=1)
        code, reward = promo_data.split("|")
        
        promos = load_promocodes()
        promos[code.upper()] = reward
        save_promocodes(promos)
        
        bot.reply_to(message, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code.upper()} —Å–æ–∑–¥–∞–Ω!\n–ù–∞–≥—Ä–∞–¥–∞: {reward}")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /newpromo –ö–û–î|–ù–ê–ì–†–ê–î–ê")



# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
@bot.callback_query_handler(func=lambda call: call.data == "settings")
def settings_menu(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚ùì FAQ", callback_data="faq"),
        types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search_settings"),
        types.InlineKeyboardButton("üéÇ –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="change_age"),
        types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    )
    bot.edit_message_text(
        "‚öô <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup
    )

# FAQ
@bot.callback_query_handler(func=lambda call: call.data == "faq")
def show_faq(call):
    faq_text = (
        "‚ùì <b>FAQ</b>\n\n"
        "1. <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?</b>\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–∏—Å–∫' –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n\n"
        "2. <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞?</b>\n"
        "–ù—É–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥\n\n"
        "3. <b>–ö–∞–∫ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π?</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å' –≤ –º–µ–Ω—é"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="settings"))
    
    bot.edit_message_text(
        faq_text,
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup
    )

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data == "change_age")
def change_age_prompt(call):
    bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
        call.message.chat.id,
        call.message.message_id
    )
    pending_data[call.from_user.id] = {"action": "change_age"}

@bot.message_handler(func=lambda message: message.from_user.id in pending_data and pending_data[message.from_user.id].get("action") == "change_age")
def update_age(message):
    age = message.text.strip()
    if not age.isdigit() or int(age) < 8 or int(age) > 50:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.")
        return

    user_id = message.from_user.id
    user_data[user_id]["age"] = int(age)
    save_all_users()
    del pending_data[user_id]
    bot.send_message(message.chat.id, "‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!")
    show_menu(message.chat.id)

# –ü–æ–∏—Å–∫ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
@bot.callback_query_handler(func=lambda call: call.data == "search_settings")
def search_settings_handler(call):
    bot.answer_callback_query(call.id, "üîç –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏!", show_alert=True)

# –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data == "create_bot")
def create_bot_handler(call):
    bot.answer_callback_query(call.id, "üöß –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–æ–≤ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!", show_alert=True)



# –í–≤–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@bot.callback_query_handler(func=lambda call: call.data == "enter_promo")
def enter_promo_handler(call):
    bot.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:",
        call.message.chat.id,
        call.message.message_id
    )
    pending_data[call.from_user.id] = {"action": "enter_promo"}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
@bot.message_handler(func=lambda message: message.from_user.id in pending_data and pending_data[message.from_user.id].get("action") == "enter_promo")
def process_promo(message):
    user_id = message.from_user.id
    promo_code = message.text.upper().strip()
    promos = load_promocodes()
    
    if promo_code in promos:
        reward = promos[promo_code]
        
        # –û—Å–æ–±—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞
        if promo_code == ADMIN_PROMO and not is_admin(user_id):
            SUB_ADMINS.add(user_id)
            save_admins()
            reward = "—Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        if "—Ä—É–±–ª" in reward.lower():
            try:
                amount = int(''.join(filter(str.isdigit, reward)))
                user_data[user_id]['balance'] = user_data[user_id].get('balance', 0) + amount
                save_all_users()
            except:
                pass
        
        bot.send_message(message.chat.id, f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: {reward}")
        
        # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
        if promo_code != ADMIN_PROMO:
            del promos[promo_code]
            save_promocodes(promos)
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫")
    
    del pending_data[user_id]
    show_menu(message.chat.id)

# –ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–∞
@bot.callback_query_handler(func=lambda call: call.data == "no_promo")
def no_promo_handler(call):
    instructions = (
        "üìå <b>–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥?</b>\n\n"
        "1. –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: @wsorion\n"
        "2. –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ –∞–∫—Ü–∏—è—Ö\n"
        "3. –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã\n"
        "4. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –±–æ—Ç–µ\n\n"
        "üîπ –ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–∞—é—Ç –±–æ–Ω—É—Å—ã: –¥–µ–Ω—å–≥–∏, —Å—Ç–∞—Ç—É—Å—ã –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏!"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="promo_code"))
    
    bot.edit_message_text(
        instructions,
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup
    )



#–∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–æ–≤
@bot.message_handler(commands=['admin'])
def handle_admin_command(message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not (user_id == ADMIN_ID or user_id == DIONCHIK_ID or user_id in SUB_ADMINS):
        bot.reply_to(message, "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
    admin_commands = """
<b>üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/publ - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
/send - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
/newpromo - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥
/member - –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
"""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
    bot.reply_to(message, admin_commands, parse_mode='HTML')











# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@bot.callback_query_handler(func=lambda call: call.data == "invite")
def invite_handler(call):
    user_id = call.from_user.id
    ref_link = f"https://t.me/{bot.get_me().username}?start=ref{user_id}"
    
    instructions = (
        f"ü§ù <b>–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!</b>\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>{ref_link}</code>\n\n"
        f"üíé –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ <b>20 —Ä—É–±–ª–µ–π</b>\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{len(user_refs.get(user_id, []))}</b>\n"
        f"üí∞ –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{len(user_refs.get(user_id, [])) * 20} —Ä—É–±–ª–µ–π</b>"
    )
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    
    bot.edit_message_text(
        instructions,
        call.message.chat.id,
        call.message.message_id,
        parse_mode="HTML",
        reply_markup=markup
    )

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data == "profile")
def show_profile(call):
    user_id = call.from_user.id
    if user_id in user_data:
        total_users = len(user_data)
        status = get_user_status(user_id)
        
        profile_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
            f"üÜî ID: <code>{user_id}</code> \n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[user_id]['phone']}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user_data[user_id]['age']}\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üíé –ë–∞–ª–∞–Ω—Å: {user_data[user_id].get('balance', 0)} —Ä—É–±\n"
            f"üî∞ –°—Ç–∞—Ç—É—Å: {status}\n\n"
            f"üìä –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(user_refs.get(user_id, []))}"
        )
        
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu"))
        
        bot.edit_message_text(
            profile_text,
            call.message.chat.id,
            call.message.message_id,
            parse_mode="HTML",
            reply_markup=markup
        )
    else:
        bot.answer_callback_query(call.id, "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu(call):
    show_menu(call.message.chat.id)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling()
